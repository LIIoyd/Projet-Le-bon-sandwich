version: "3.9"

services:
  node_orders:
    image: node:alpine
    #command: npm start #production
    command: npm run watch #pour le dévellopement seulement (fonctionne uniquement si Nodemon est installé)
    #command: npm test
    env_file:
      #définit l'emplacement du fichier de variables d'environnement
      - orders.env
    working_dir: /usr/src/app
    ports:
      - 3333:3000 #associe le port local 3333 au port 3000 du container
    volumes:
      - ./app/orders:/usr/src/app #synchronise le répertoire local ./app/orders avec le répertoire du container ${WORKDIR}
    networks:
      - lbs
    links:
      - mariadb_orders #facilite l'accès à la base de données via le network
    depends_on:
      #permet d'organiser le démarrage des services
      mariadb_orders:
        condition: service_healthy #vérifie que le serveur de base de données est prêt et fonctionnel

  mariadb_orders:
    image: mariadb
    env_file:
      #définit l'emplacement du fichier de variables d'environnement
      - orders.env
    volumes:
      - ./db/orders/data:/var/lib/mysql #synchronise le répertoire local ./db/data avec le répertoire du container /var/lib/mysql
      - ./db/orders/sql:/docker-entrypoint-initdb.d #initialise la base de données à l'aide des fichiers SQL présents dans le volume local ./db/sql/orders
    ports:
      - 3306:3306 #associe le port local 3306 au port 3306 du container
    networks:
      - lbs
    healthcheck:
      #vérifie le fonctionnement du service
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-uroot",
          "-p${MARIADB_ROOT_PASSWORD}",
        ]
      interval: 5s
      timeout: 5s
      retries: 20

  adminer_orders:
    image: adminer
    env_file:
      #définit l'emplacement du fichier de variables d'environnement
      - orders.env
    ports:
      - 8181:8080 #associe le port local 8181 au port 8080 du container
    networks:
      - lbs

  node_auth:
    image: node:alpine
    command: npm run watch
    env_file:
      - auth.env
    working_dir: /usr/src/app
    ports:
      - 3334:3000
    volumes:
      - ./app/auth:/usr/src/app
    networks:
      - lbs
    links:
      - mariadb_auth
    depends_on:
      mariadb_auth:
        condition: service_healthy

  mariadb_auth:
    image: mariadb
    env_file:
      - auth.env
    volumes:
      - ./db/auth/data:/var/lib/mysql
      - ./db/auth/sql:/docker-entrypoint-initdb.d
    ports:
      - 3307:3306
    networks:
      - lbs
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-uroot",
          "-p${MARIADB_ROOT_PASSWORD}",
        ]
      interval: 5s
      timeout: 5s
      retries: 20

  adminer_auth:
    image: adminer
    env_file:
      - auth.env
    ports:
      - 8182:8080
    networks:
      - lbs

  node_lbs:
    image: node:alpine
    command: npm run watch
    working_dir: /usr/src/app
    links:
      - node_orders
      - node_auth
    ports:
      - 3335:3000
    volumes:
      - ./app/lbs:/usr/src/app
    networks:
      - lbs
      
  directus_database:
    container_name: database
    image: postgis/postgis:13-master
    volumes:
      - ./db/directus:/var/lib/postgresql/data
    networks:
      - lbs
    env_file:
    - directus.env

  directus:
    container_name: directus
    image: directus/directus:latest
    ports:
      - 8055:8055
    volumes:
      # By default, uploads are stored in /directus/uploads
      # Always make sure your volumes matches the storage root when using
      # local driver
      - ./uploads:/directus/uploads
      # Make sure to also mount the volume when using SQLite
      # - ./database:/directus/database
      # If you want to load extensions from the host
      # - ./extensions:/directus/extensions
    networks:
      - lbs
    depends_on:
      - directus_database
    env_file:
    - directus.env
    


networks:
  lbs:
    driver: bridge
  
